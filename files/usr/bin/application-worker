#!/usr/bin/env bash

echo "Application Worker"
#
# To run just the application worker in its own container use
# $ docker run ubuntu-16-django-application application-worker
#

# Stop on error
set -e

cd /var/www
if [ ! -e "manage.py" ]; then
    echo "ERROR: Django application not present in /var/www"
    exit 1
fi

if [ -z "$1" ]; then
    # No command line arguments ... assume being called as docker run argument
    application-component-enable worker
    exec /init/supervisord
else
    # Execute our scheduler
    # NB. This follows the slightly older way of doing this and requires the django-celery package
    source application-python-environment

    CELERY_ARGS=""

    if [ ! -z "${DJANGO_LOG_LEVEL}" ]; then
        CELERY_ARGS="${CELERY_ARGS} -l ${DJANGO_LOG_LEVEL}"
    fi

    if [ ! -z "${CELERY_CONCURRENCY}" ] && [ "${CELERY_CONCURRENCY}" != "AUTO" ]; then
        CELERY_ARGS="${CELERY_ARGS} -c ${CELERY_CONCURRENCY}"
    fi

    if [ ! -z "${CELERY_QUEUE}" ]; then
        CELERY_ARGS="${CELERY_ARGS} -Q ${CELERY_QUEUE} -n '%h.${CELERY_QUEUE}'"
    fi

    exec python /var/www/manage.py celeryd ${CELERY_ARGS} "${@:2}"
fi
